%
% driver.m.erb:
%
% this is used to produce the comparative numerical results
%
addpath("<%= parm.lib_path %>")
pkg load signal;
pkg load statistics;

[sig sr] = audioread("<%= parm.in_audio_file %>");
sinc = 1/sr;
dur = length(sig)/sr;
amp = max(sig);
t = [0:sinc:dur-sinc]';
offset = dur/2;
s_offset = round(offset * sr);
sound_speed = <%= glob.sound_speed %>;

%
% signal at <%= src.source_positions[1][0] %>,<%= src.source_positions[1][1] %> on a stereo pair
%
spos.x = <%= src.source_positions[1][0] %>;
spos.y = <%= src.source_positions[1][1] %>;
spk(1).x = <%= spaces.loudspeaker_positions[1][0] %>;
spk(1).y = <%= spaces.loudspeaker_positions[1][1] %>;
spk(2).x = <%= spaces.loudspeaker_positions[2][0] %>;
spk(2).y = <%= spaces.loudspeaker_positions[2][1] %>;
outer_room = [ <%= spaces.virtual_space['depth'] %>, <%= spaces.virtual_space['width'] %> ]; % outer_room dimensions: length, width
refls = refl_1st_order(spos, outer_room);
octave_signal = source_calculation(sig, spos, [spk(1) spk(2)], outer_room, sr, sound_speed);

max_sig_amp = max(max(abs(octave_signal(:,1))), max(abs(octave_signal(:,2))));
max_sig_amp *= 1.1;

figure(1, "visible", "off");
subplot(2,1,1)
  plot(t, octave_signal(:, 1))
  axis([offset dur -(max_sig_amp/10) max_sig_amp])
subplot(2,1,2)
  plot(t, octave_signal(:, 2))
  axis([offset dur -(max_sig_amp/10) max_sig_amp])

print("<%= parm.out_print_file %>", "-dpdf");

audiowrite("<%= parm.out_audio_file %>", octave_signal, sr);

%
% write a yaml info file
%
source_delays = zeros(1, 2);
source_distances = [ distance(spos, spk(1)) distance(spos, spk(2)) ];
source_delays(1) = itd_samples(source_distances(1), sr, sound_speed)/sr;
source_delays(2) = itd_samples(source_distances(2), sr, sound_speed)/sr;
source_atten = 1 ./ source_distances;
refl_distances = zeros(4, 2);
refl_delays = zeros(4, 2);
for k=1:4
  refl_distances(k, :) = [ distance(refls(k), spk(1)) distance(refls(k), spk(2)) ];
  refl_delays(k, 1) = itd_samples(refl_distances(k, 1), sr, sound_speed)/sr;
  refl_delays(k, 2) = itd_samples(refl_distances(k, 2), sr, sound_speed)/sr;
end
refl_atten = 1 ./ refl_distances;
yfh = fopen("<%= parm.out_info_file %>", 'w');
rfltags = [ "rfw"; "rrw"; "rbw"; "rlw" ];
fdisp(yfh, "#\n# Created automatically by driver.m\n#");
fdisp(yfh, "octave_info:");
fprintf(yfh, "  sample_rate: %d\n", sr);
fprintf(yfh, "  sound_speed: %.8f\n", sound_speed);
fprintf(yfh, "  amp: %.8f\n", amp);
fprintf(yfh, "  room: [ %.8f, %.8f ] # depth, width\n", outer_room);
fprintf(yfh, "  source_position: [ %.8f, %.8f ]\n", spos.x, spos.y);
fdisp(yfh,   "  first_order_reflections:");
for k=1:4
  fprintf(yfh, "    %s: [ %.9f, %.9f ]\n", rfltags(k, :), refls(k).x, refls(k).y);
end
fdisp(yfh,   "  speakers:");
for s=1:2
  fprintf(yfh, "    %d:\n", s);
  fprintf(yfh, "      x: %.9f\n", spk(s).x);
  fprintf(yfh, "      y: %.9f\n      distances:\n", spk(s).y);
  fprintf(yfh, "        direct: %.9f\n", source_distances(s));
  for k=1:4
    fprintf(yfh, "        %s: %.9f\n", rfltags(k,:), refl_distances(k,s));
  end
  fdisp(yfh, "      delays:");
  fprintf(yfh, "        direct: %.9f\n", source_delays(s));
  for k=1:4
    fprintf(yfh, "        %s: %.9f\n", rfltags(k,:), refl_delays(k,s));
  end
  fdisp(yfh, "      attenuations:")
  fprintf(yfh, "        direct: %.9f\n", source_atten(s));
  for k=1:4
    fprintf(yfh, "        %s: %.9f\n", rfltags(k,:), refl_atten(k,s));
  end
end
fclose(yfh);
