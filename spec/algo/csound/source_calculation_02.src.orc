;
; $Id: header.orc.erb 7 2012-05-16 01:16:40Z nicb $
;
; Generated by cosb: Csound Orchestra Space Builder
; https://github.com/nicb/cosb
;
; Created from the following configuration files:
;
; global: ../config/global/default.yml
; space:	../config/spaces/source_calculation_02.lsp.yml
; templates:
;		header:             /home/nicb/me/svn/nicb/projects/music/Nono/Prometeo-Luigi_Nono/SACD/cosb/templates/header.orc.erb
;		sound_source:       /home/nicb/me/svn/nicb/projects/music/Nono/Prometeo-Luigi_Nono/SACD/cosb/templates/sound_source.orc.erb
;		movements:          /home/nicb/me/svn/nicb/projects/music/Nono/Prometeo-Luigi_Nono/SACD/cosb/templates/movements.orc.erb
;		point_source:       /home/nicb/me/svn/nicb/projects/music/Nono/Prometeo-Luigi_Nono/SACD/cosb/templates/point_source.orc.erb
;		room_definition:    /home/nicb/me/svn/nicb/projects/music/Nono/Prometeo-Luigi_Nono/SACD/cosb/templates/room_definition.orc.erb
;		single_speaker:     /home/nicb/me/svn/nicb/projects/music/Nono/Prometeo-Luigi_Nono/SACD/cosb/templates/single_speaker.orc.erb
;		reverb_and_output:  /home/nicb/me/svn/nicb/projects/music/Nono/Prometeo-Luigi_Nono/SACD/cosb/templates/reverb_and_output.orc.erb
;
			sr = 48000
			ksmps = 1
			nchnls = 4


      givel	 init 344 ; speed of sound at normal temperatures
			zakinit 5, 2
;
;
;
;
; $Id: sound_source.orc.erb 12 2012-05-16 02:38:45Z nicb $
;
;
; input instruments
;
         instr     1, 2

         ifirst    init      1
         index     init      p1 - ifirst ; audio channel (mono)
         iamp      =         ampdb(p4)
         idur      =         p3
	 ifno      =         p5

         asig      soundin   ifno
         asig      =         asig * iamp
         asig      linen     asig, 0.005, idur, 0.005

                   zawm      asig, index

         endin
        ;
        ; $Id$
        ;
        ; By default, only single-segment (static positioning) movements are defined.
        ; Use the '-m' option to substitute this template with one of yours.
        ;
        instr 301, 302

        ifirst      init     301
        index       init     p1 - ifirst
        iparoffset  init     index * 2
        ixindex     init     iparoffset     ; x of { x, y }
        iyindex     init     iparoffset + 1 ; y of { x, y }
        idur        =        p3
        ixstart     =        p4
        ixend       =        p5
        iystart     =        p6
        iyend       =        p7
	idursmps    =        int(idur*kr)
	idurfinal   =        idursmps/kr

        kx          line     ixstart, idurfinal, ixend
        ky          line     iystart, idurfinal, iyend

                    zkw      kx, ixindex
                    zkw      ky, iyindex
        endin
;
; $Id: point_source.orc.erb 16 2013-04-19 20:43:38Z nicb $
;
;----------------------------------------------
; POINT-SOURCE ROOM INSTRUMENTS
;----------------------------------------------
;
instr 1301, 1302
;
; input indexings
;
        ifirst     init 1301 ; first instrument number
        index      init p1 - ifirst ; audio channel (mono)
        iparoffset init index * 2   ; data structure is { x, y }
        ixindex    init iparoffset
        iyindex    init iparoffset + 1
                   print p1, index, ixindex, iyindex

        idur       = p3
        iattadir   = ampdb(p4)       ; amplitude attenuation (in dB)
        iattarev   = ampdb(p5)       ; reverb send attenuation

        ;
        ; audio input
        ;
        arcv      zar  index         ; signal
        audioin   =    arcv * iattadir
        asend     =    0
                  zacl index,index   ; clear signal after reading
        ;
        ; position (coming from the movement engines)
        ;
        kx        zkr  ixindex      
        ky        zkr  iyindex

        ;
        ; inner and outer room definitions
        ;
        ideltaf   init 20000                   ; should be around the threshold of hearing
        ;
        ; $Id: room_definition.orc.erb 3 2012-05-15 03:21:07Z nicb $
        ;
        ; inner room definition
        ;
  
        ixsp1 init -1.0  ; x coordinate (in m) for speaker n. 1
        iysp1 init 1.0  ; y coordinate (in m) for speaker n. 1
  
        ixsp2 init 1.0  ; x coordinate (in m) for speaker n. 2
        iysp2 init 1.0  ; y coordinate (in m) for speaker n. 2
  
        ;
        ; outer room definition
        ;
        ixmax  init 2.5
        ixmin  init -2.5
        iymax  init 4.0
        iymin  init -4.0
        ix     init ixmax
        iy     init iymax
        ;
        ; cut off frequency for the back wall reflections
        ;
        iw3cutoff init ideltaf / (1 - (iymin*0.35))

        print ixmax, ixmin, iymax, iymin, iw3cutoff

        ;
        ; front/back filtering
        ;
        kfbfc     =    ideltaf * (1 + (ky/iy))
        afiltered tone audioin, kfbfc

        audio     = (ky >= 0 ? audioin : afiltered)

        ;
        ; first-order reflection positions (clock-wise order)
        ;
	kxmax     = 2*(ixmax-kx)
	kymax     = 2*(iymax-ky)
	kxmin     = 2*(kx-ixmin)
	kymin     = 2*(ky-iymin)
        kw1       = ky + kymax  ; reflection from front wall
        kw2       = kx + kxmax  ; reflection from right wall
        kw3       = kymin - ky  ; reflection from back wall
        kw4       = kxmin - kx  ; reflection from left wall
	kw1sq     = kw1*kw1
	kw2sq     = kw2*kw2
	kw3sq     = kw3*kw3
	kw4sq     = kw4*kw4

        adeld   delayr    1   ; maximum delay: 1 second (more than enough)

        ;
        ; $Id: single_speaker.orc.erb 16 2013-04-19 20:43:38Z nicb $
        ;
        ;
        ; output index parameters for speaker 1
        ;
        idiroutput1 init 1
        irevoutput1 init 2
        ;
        ; positional parameters for speaker 1
        ;
        kxsp1  = kx-ixsp1
        kysp1  = ky-iysp1
        kxsp1q = kxsp1*kxsp1
        kysp1q = kysp1*kysp1
        ;
        ; direct signal distance calculation
        ;
        ksp1d  = sqrt(kxsp1q+kysp1q) ; dist dir -> sp1
        ;
        ; first order reflection distance calculations
        ;
        ksp1w1 = sqrt(kxsp1q+kw1sq) ; dist ref w1 -> sp1
        ksp1w2 = sqrt(kxsp1q+kw2sq) ; dist ref w2 -> sp1
        ksp1w3 = sqrt(kxsp1q+kw3sq) ; dist ref w3 -> sp1
        ksp1w4 = sqrt(kxsp1q+kw4sq) ; dist ref w4 -> sp1
        ;
        ; delays
        ;
        kdelsp1d   port ksp1d/givel,0.1    ; direct sound
        kdelsp1w1  port ksp1w1/givel,0.1   ; wall 1 reflection
        kdelsp1w2  port ksp1w2/givel,0.1   ; wall 2 reflection
        kdelsp1w3  port ksp1w3/givel,0.1   ; wall 3 reflection
        kdelsp1w4  port ksp1w4/givel,0.1   ; wall 4 reflection
        ;
        ; signal management
        ;
        asp1d      deltapi kdelsp1d        ; direct signal -> sp 1
        asp1w1     deltapi kdelsp1w1       ; ref    w1     -> sp 1
        asp1w2     deltapi kdelsp1w2       ; ref    w2     -> sp 1
        asp1w3     deltapi kdelsp1w3       ; ref    w3     -> sp 1
        asp1w4     deltapi kdelsp1w4       ; ref    w4     -> sp 1

        alpfsp1w3  tone    asp1w3, iw3cutoff ; lpf filter on back wall reflections

        asp1     = ((asp1d/ksp1d)+(asp1w1/ksp1w1)+(asp1w2/ksp1w2)+(asp1w3/ksp1w3)+(asp1w4/ksp1w4))
        arevsp1  = iattarev*((asp1d/sqrt(ksp1d))+(asp1w1/sqrt(ksp1w1))+(asp1w2/sqrt(ksp1w2))+(asp1w3/sqrt(ksp1w3))+(asp1w4/sqrt(ksp1w4)))

                  zawm asp1, idiroutput1
                  zawm arevsp1, irevoutput1
        ;
        ; $Id: single_speaker.orc.erb 16 2013-04-19 20:43:38Z nicb $
        ;
        ;
        ; output index parameters for speaker 2
        ;
        idiroutput2 init 3
        irevoutput2 init 4
        ;
        ; positional parameters for speaker 2
        ;
        kxsp2  = kx-ixsp2
        kysp2  = ky-iysp2
        kxsp2q = kxsp2*kxsp2
        kysp2q = kysp2*kysp2
        ;
        ; direct signal distance calculation
        ;
        ksp2d  = sqrt(kxsp2q+kysp2q) ; dist dir -> sp2
        ;
        ; first order reflection distance calculations
        ;
        ksp2w1 = sqrt(kxsp2q+kw1sq) ; dist ref w1 -> sp2
        ksp2w2 = sqrt(kxsp2q+kw2sq) ; dist ref w2 -> sp2
        ksp2w3 = sqrt(kxsp2q+kw3sq) ; dist ref w3 -> sp2
        ksp2w4 = sqrt(kxsp2q+kw4sq) ; dist ref w4 -> sp2
        ;
        ; delays
        ;
        kdelsp2d   port ksp2d/givel,0.1    ; direct sound
        kdelsp2w1  port ksp2w1/givel,0.1   ; wall 1 reflection
        kdelsp2w2  port ksp2w2/givel,0.1   ; wall 2 reflection
        kdelsp2w3  port ksp2w3/givel,0.1   ; wall 3 reflection
        kdelsp2w4  port ksp2w4/givel,0.1   ; wall 4 reflection
        ;
        ; signal management
        ;
        asp2d      deltapi kdelsp2d        ; direct signal -> sp 2
        asp2w1     deltapi kdelsp2w1       ; ref    w1     -> sp 2
        asp2w2     deltapi kdelsp2w2       ; ref    w2     -> sp 2
        asp2w3     deltapi kdelsp2w3       ; ref    w3     -> sp 2
        asp2w4     deltapi kdelsp2w4       ; ref    w4     -> sp 2

        alpfsp2w3  tone    asp2w3, iw3cutoff ; lpf filter on back wall reflections

        asp2     = ((asp2d/ksp2d)+(asp2w1/ksp2w1)+(asp2w2/ksp2w2)+(asp2w3/ksp2w3)+(asp2w4/ksp2w4))
        arevsp2  = iattarev*((asp2d/sqrt(ksp2d))+(asp2w1/sqrt(ksp2w1))+(asp2w2/sqrt(ksp2w2))+(asp2w3/sqrt(ksp2w3))+(asp2w4/sqrt(ksp2w4)))

                  zawm asp2, idiroutput2
                  zawm arevsp2, irevoutput2


                delayw    audio

endin
        ;
        ; $Id: reverb_and_output.orc.erb 9 2012-05-16 01:46:09Z nicb $
        ;
        ; reverb and final output instrument
        ;
        instr 5000


        irevtL      init 2.3
        irevtl      init irevtL-0.05
        irevtr      init irevtL+0.05
        iatl        =    0.921         ; attenuation f_acute left
        iatr        =    0.919         ; attenuation f_acute right
        iatL      =    0.920         ; attenuation f_acute center
        isiglp      =    4000          ; low-pass filtering of input signal

        ;
        ; channel 1
        ;
        idirbus1  init 1
        irevbus1  init 2

        adir1     zar  idirbus1
        arevsend1 zar  irevbus1

        arssp1    butterlp  arevsend1, isiglp
        arev1     nreverb   arssp1, irevtL, iatL
                  zacl      idirbus1, idirbus1
                  zacl      irevbus1, irevbus1

        irevtR      init 2.3
        irevtl      init irevtR-0.05
        irevtr      init irevtR+0.05
        iatl        =    0.921         ; attenuation f_acute left
        iatr        =    0.919         ; attenuation f_acute right
        iatR      =    0.920         ; attenuation f_acute center
        isiglp      =    4000          ; low-pass filtering of input signal

        ;
        ; channel 2
        ;
        idirbus2  init 3
        irevbus2  init 4

        adir2     zar  idirbus2
        arevsend2 zar  irevbus2

        arssp2    butterlp  arevsend2, isiglp
        arev2     nreverb   arssp2, irevtR, iatR
                  zacl      idirbus2, idirbus2
                  zacl      irevbus2, irevbus2

        ;
        ; final output stage
        ;
                  outc adir1, adir2, arev1, arev2

        endin
