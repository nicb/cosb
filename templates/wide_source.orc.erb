        ;
        ; $Id: wide_source.orc.erb 16 2013-04-19 20:43:38Z nicb $
        ;
        ;----------------------------------------------
        ; WIDE-SOURCE ROOM INSTRUMENTS
        ;----------------------------------------------
        ;
        instr <%= _cr.wide_source_instrument_numbers %>
        ;
        ; input indexings
        ;
        ifirst     init <%= _cr.first_point_source_instrument %> ; first instrument number
        index      init p1 - ifirst ; audio channel (mono)
        iparoffset init index * 2   ; data structure is { x, y }
        ixindex    init iparoffset
        iyindex    init iparoffset + 1
                   print p1, index, ixindex, iyindex
        ;
        idur       = p3
        iattadir   = ampdb(p4)       ; amplitude attenuation (in dB)
        iattarev   = ampdb(p5)       ; reverb send attenuation
				insources  = <%= _cr.configuration.global_configuration.points_per_w_objects %>    ; number of point sources per object (should be an even number)
				iobjradius = p6              ; virtual radius of the object
				idispangle = p7              ; display angle (in degrees)
				idispangle = (idispangle/360) * 3.14159265 ; angle in radians
        ;

        ;
        ; audio input
        ;
        arcv      zar  index         ; signal
        audioin   =    arcv * iattadir
        asend     =    0
                  zacl index,index   ; clear signal after reading
        ;
        ; position (coming from the movement engines)
        ;
        kx        zkr  ixindex      
        ky        zkr  iyindex

        ideltaf   init 20000                   ; should be around the threshold of hearing
        ;
        ; inner and outer room definitions
        ;
<%= _cr.room_definition %>
<% if _cr.no_filtering? %>
        ;
        ; no front/back filtering in circular multi-channel setups
        ;
        audio     = audioin
<% else %>
        ;
        ; front/back filtering
        ;
        kfbfc     =    ideltaf * (1 + (ky/iy))
        afiltered tone audioin, kfbfc

        audio     = (ky >= 0 ? audioin : afiltered)
<% end %>

        ;
        ; first-order reflection positions (clock-wise order)
        ;
        kw1       = ky + kymax  ; reflection from front wall
        kw2       = kx + kxmax  ; reflection from right wall
        kw3       = kymin - ky  ; reflection from back wall
        kw4       = kxmin - kx  ; reflection from left wall

        adeld     delayr    1   ; maximum delay: 1 second (more than enough)

<%= _cr.point_sources %>

                  delayw    audio

        endin
