        ;
        ; $Id: single_speaker.orc.erb 16 2013-04-19 20:43:38Z nicb $
        ;
        ;
        ; output index parameters for speaker <%= _s.number %>
        ;
        idiroutput<%= _s.number %> init <%= _s.direct_output_bus %>
        irevoutput<%= _s.number %> init <%= _s.reverb_output_bus %>
        ;
        ; positional parameters for speaker <%= _s.number %>
        ;
        kxsp<%= _s.number %>   = kx-ixsp<%= _s.number %>
        kysp<%= _s.number %>   = ky-iysp<%= _s.number %>
        kxsp<%= _s.number %>sq = kxsp<%= _s.number %>*kxsp<%= _s.number %>
        kysp<%= _s.number %>sq = kysp<%= _s.number %>*kysp<%= _s.number %>
        ;
        ; direct signal distance calculation
        ;
        ksp<%= _s.number %>d  = sqrt(kxsp<%= _s.number %>sq+kysp<%= _s.number %>sq) ; dist dir -> sp<%= _s.number %>
        ;
        ; first order reflection distance calculations
        ;
        ksp<%= _s.number %>yw1sq = ((kw1y-iysp<%= _s.number %>)^2)
        ksp<%= _s.number %>w1 = sqrt(kxsp<%= _s.number %>sq+ksp<%= _s.number %>yw1sq) ; dist ref w1 -> sp<%= _s.number %>
        ksp<%= _s.number %>xw2sq = ((kw2x-ixsp<%= _s.number %>)^2)
        ksp<%= _s.number %>w2 = sqrt(ksp<%= _s.number %>xw2sq+kysp<%= _s.number %>sq) ; dist ref w2 -> sp<%= _s.number %>
        ksp<%= _s.number %>yw3sq = ((kw3y-iysp<%= _s.number %>)^2)
        ksp<%= _s.number %>w3 = sqrt(kxsp<%= _s.number %>sq+ksp<%= _s.number %>yw3sq) ; dist ref w3 -> sp<%= _s.number %>
        ksp<%= _s.number %>xw4sq = ((kw4x-ixsp<%= _s.number %>)^2)
        ksp<%= _s.number %>w4 = sqrt(ksp<%= _s.number %>xw4sq+kysp<%= _s.number %>sq) ; dist ref w4 -> sp<%= _s.number %>
        printks "single_speaker[<%= _s.number %>]: distances: source=%04d, direct=%12.9f, rfw=%12.9f, rrw=%12.9f, rbw=%12.9f, rlw=%12.9f\n", iprintkperiod, index+1, ksp<%= _s.number %>d, ksp<%= _s.number %>w1, ksp<%= _s.number %>w2, ksp<%= _s.number %>w3, ksp<%= _s.number %>w4
        ;
        ; delays
        ;
        ; kdelsp<%= _s.number %>d   port ksp<%= _s.number %>d/givel,0.0005    ; direct sound
        ; kdelsp<%= _s.number %>w1  port ksp<%= _s.number %>w1/givel,0.0005   ; wall 1 reflection
        ; kdelsp<%= _s.number %>w2  port ksp<%= _s.number %>w2/givel,0.0005   ; wall 2 reflection
        ; kdelsp<%= _s.number %>w3  port ksp<%= _s.number %>w3/givel,0.0005   ; wall 3 reflection
        ; kdelsp<%= _s.number %>w4  port ksp<%= _s.number %>w4/givel,0.0005   ; wall 4 reflection
        kdelsp<%= _s.number %>d     =    ksp<%= _s.number %>d/givel           ; direct sound
        kdelsp<%= _s.number %>w1    =    ksp<%= _s.number %>w1/givel          ; wall 1 reflection
        kdelsp<%= _s.number %>w2    =    ksp<%= _s.number %>w2/givel          ; wall 2 reflection
        kdelsp<%= _s.number %>w3    =    ksp<%= _s.number %>w3/givel          ; wall 3 reflection
        kdelsp<%= _s.number %>w4    =    ksp<%= _s.number %>w4/givel          ; wall 4 reflection
        printks "single_speaker[<%= _s.number %>]: delays: source=%04d, direct=%12.9f, rfw=%12.9f, rrw=%12.9f, rbw=%12.9f, rlw=%12.9f\n", iprintkperiod, index+1, kdelsp<%= _s.number %>d, kdelsp<%= _s.number %>w1, kdelsp<%= _s.number %>w2, kdelsp<%= _s.number %>w3, kdelsp<%= _s.number %>w4
        ;
        ; attenuations
        ;
        kattsp<%= _s.number %>d   =    1/ksp<%= _s.number %>d               ; direct sound
        kattsp<%= _s.number %>w1  =    1/ksp<%= _s.number %>w1              ; wall 1 reflection
        kattsp<%= _s.number %>w2  =    1/ksp<%= _s.number %>w2              ; wall 2 reflection
        kattsp<%= _s.number %>w3  =    1/ksp<%= _s.number %>w3              ; wall 3 reflection
        kattsp<%= _s.number %>w4  =    1/ksp<%= _s.number %>w4              ; wall 4 reflection
        printks "single_speaker[<%= _s.number %>]: attenuations: source=%04d, direct=%12.9f, rfw=%12.9f, rrw=%12.9f, rbw=%12.9f, rlw=%12.9f\n", iprintkperiod, index+1, kattsp<%= _s.number %>d, kattsp<%= _s.number %>w1, kattsp<%= _s.number %>w2, kattsp<%= _s.number %>w3, kattsp<%= _s.number %>w4
        ;
        ; signal management
        ;
        asp<%= _s.number %>d      deltap kdelsp<%= _s.number %>d        ; direct signal -> sp <%= _s.number %>
        asp<%= _s.number %>w1     deltap kdelsp<%= _s.number %>w1       ; ref    w1     -> sp <%= _s.number %>
        asp<%= _s.number %>w2     deltap kdelsp<%= _s.number %>w2       ; ref    w2     -> sp <%= _s.number %>
        asp<%= _s.number %>w3     deltap kdelsp<%= _s.number %>w3       ; ref    w3     -> sp <%= _s.number %>
        asp<%= _s.number %>w4     deltap kdelsp<%= _s.number %>w4       ; ref    w4     -> sp <%= _s.number %>

<% if _cr.no_filtering? %>
        alpfsp<%= _s.number %>w3  =       asp<%= _s.number %>w3          ; no filtering in circular multi-channel setups
<% else %>
        alpfsp<%= _s.number %>w3  tone    asp<%= _s.number %>w3, iw3cutoff ; lpf filter on back wall reflections
<% end %>

        asp<%= _s.number %>     = ((asp<%= _s.number %>d*kattsp<%= _s.number %>d)+(asp<%= _s.number %>w1*kattsp<%= _s.number %>w1)+(asp<%= _s.number %>w2*kattsp<%= _s.number %>w2)+(asp<%= _s.number %>w3*kattsp<%= _s.number %>w3)+(asp<%= _s.number %>w4*kattsp<%= _s.number %>w4))
        arevsp<%= _s.number %>  = iattarev*((asp<%= _s.number %>d/sqrt(ksp<%= _s.number %>d))+(asp<%= _s.number %>w1/sqrt(ksp<%= _s.number %>w1))+(asp<%= _s.number %>w2/sqrt(ksp<%= _s.number %>w2))+(asp<%= _s.number %>w3/sqrt(ksp<%= _s.number %>w3))+(asp<%= _s.number %>w4/sqrt(ksp<%= _s.number %>w4)))

                  zawm asp<%= _s.number %>, idiroutput<%= _s.number %>
                  zawm arevsp<%= _s.number %>, irevoutput<%= _s.number %>
