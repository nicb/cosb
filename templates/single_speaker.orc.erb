        ;
        ; $Id: single_speaker.orc.erb 16 2013-04-19 20:43:38Z nicb $
        ;
        ;
        ; output index parameters for speaker <%= _s.number %>
        ;
        idiroutput<%= _s.number %> init <%= _s.direct_output_bus %>
        irevoutput<%= _s.number %> init <%= _s.reverb_output_bus %>
        ;
        ; positional parameters for speaker <%= _s.number %>
        ;
        kxsp<%= _s.number %>  = kx-ixsp<%= _s.number %>
        kysp<%= _s.number %>  = ky-iysp<%= _s.number %>
        kxsp<%= _s.number %>q = kxsp<%= _s.number %>*kxsp<%= _s.number %>
        kysp<%= _s.number %>q = kysp<%= _s.number %>*kysp<%= _s.number %>
        ;
        ; direct signal distance calculation
        ;
        ksp<%= _s.number %>d  = sqrt(kxsp<%= _s.number %>q+kysp<%= _s.number %>q) ; dist dir -> sp<%= _s.number %>
        ;
        ; first order reflection distance calculations
        ;
        ksp<%= _s.number %>w1 = sqrt(kxsp<%= _s.number %>q+kw1sq) ; dist ref w1 -> sp<%= _s.number %>
        ksp<%= _s.number %>w2 = sqrt(kxsp<%= _s.number %>q+kw2sq) ; dist ref w2 -> sp<%= _s.number %>
        ksp<%= _s.number %>w3 = sqrt(kxsp<%= _s.number %>q+kw3sq) ; dist ref w3 -> sp<%= _s.number %>
        ksp<%= _s.number %>w4 = sqrt(kxsp<%= _s.number %>q+kw4sq) ; dist ref w4 -> sp<%= _s.number %>
        ;
        ; delays
        ;
        kdelsp<%= _s.number %>d   port ksp<%= _s.number %>d/givel,0.1    ; direct sound
        kdelsp<%= _s.number %>w1  port ksp<%= _s.number %>w1/givel,0.1   ; wall 1 reflection
        kdelsp<%= _s.number %>w2  port ksp<%= _s.number %>w2/givel,0.1   ; wall 2 reflection
        kdelsp<%= _s.number %>w3  port ksp<%= _s.number %>w3/givel,0.1   ; wall 3 reflection
        kdelsp<%= _s.number %>w4  port ksp<%= _s.number %>w4/givel,0.1   ; wall 4 reflection
        ;
        ; signal management
        ;
        asp<%= _s.number %>d      deltapi kdelsp<%= _s.number %>d        ; direct signal -> sp <%= _s.number %>
        asp<%= _s.number %>w1     deltapi kdelsp<%= _s.number %>w1       ; ref    w1     -> sp <%= _s.number %>
        asp<%= _s.number %>w2     deltapi kdelsp<%= _s.number %>w2       ; ref    w2     -> sp <%= _s.number %>
        asp<%= _s.number %>w3     deltapi kdelsp<%= _s.number %>w3       ; ref    w3     -> sp <%= _s.number %>
        asp<%= _s.number %>w4     deltapi kdelsp<%= _s.number %>w4       ; ref    w4     -> sp <%= _s.number %>

<% if _cr.no_filtering? %>
        alpfsp<%= _s.number %>w3  =       asp<%= _s.number %>w3          ; no filtering in circular multi-channel setups
<% else %>
        alpfsp<%= _s.number %>w3  tone    asp<%= _s.number %>w3, iw3cutoff ; lpf filter on back wall reflections
<% end %>

        asp<%= _s.number %>     = ((asp<%= _s.number %>d/ksp<%= _s.number %>d)+(asp<%= _s.number %>w1/ksp<%= _s.number %>w1)+(asp<%= _s.number %>w2/ksp<%= _s.number %>w2)+(asp<%= _s.number %>w3/ksp<%= _s.number %>w3)+(asp<%= _s.number %>w4/ksp<%= _s.number %>w4))
        arevsp<%= _s.number %>  = iattarev*((asp<%= _s.number %>d/sqrt(ksp<%= _s.number %>d))+(asp<%= _s.number %>w1/sqrt(ksp<%= _s.number %>w1))+(asp<%= _s.number %>w2/sqrt(ksp<%= _s.number %>w2))+(asp<%= _s.number %>w3/sqrt(ksp<%= _s.number %>w3))+(asp<%= _s.number %>w4/sqrt(ksp<%= _s.number %>w4)))

                  zawm asp<%= _s.number %>, idiroutput<%= _s.number %>
                  zawm arevsp<%= _s.number %>, irevoutput<%= _s.number %>
